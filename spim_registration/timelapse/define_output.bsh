import ij.IJ; 		// calls imagej
import ij.Prefs; 	// calls imagej settings
import ij.ImagePlus;
import java.lang.Runtime;
import java.io.File;
import java.io.FilenameFilter;

runtime = Runtime.getRuntime();
System.out.println(runtime.availableProcessors() + " cores available for multi-threading");

Prefs.setThreads(1); 	// defines the number of threads allowed 
print("Threads: "+Prefs.getThreads()); // prints thread setting in output

System.out.println("Start loading parameters");
// Directory
System.out.println("=========================================================");
System.out.println("Directory:");
image_file_directory = System.getProperty( "image_file_directory" );
xml_filename = System.getProperty( "xml_filename" );

System.out.println( "image_file_directory = " + image_file_directory );
System.out.println( "xml_filename = " + xml_filename );

// Dataset settings
System.out.println("=========================================================");
System.out.println("Dataset:");

type_of_dataset = System.getProperty( "type_of_dataset" );
multiple_timepoints = System.getProperty( "multiple_timepoints" );
multiple_illumination_directions = System.getProperty( "multiple_illumination_directions" );
multiple_angles = System.getProperty( "multiple_angles" );
imglib_container = System.getProperty( "imglib_container" );

System.out.println( "type_of_dataset = " + type_of_dataset );
System.out.println( "multiple_timepoints = " + multiple_timepoints );
System.out.println( "multiple_illumination_directions = " + multiple_illumination_directions );
System.out.println( "multiple_angles = " + multiple_angles );
System.out.println( "imglib_container = " + imglib_container );

// Calibaration
System.out.println("=========================================================");
System.out.println("Calibration:");
float pixel_distance_x = Float.parseFloat( System.getProperty( "pixel_distance_x" ) );
float pixel_distance_y = Float.parseFloat( System.getProperty( "pixel_distance_y" ) );
float pixel_distance_z = Float.parseFloat( System.getProperty( "pixel_distance_z" ) );
pixel_unit = System.getProperty( "pixel_unit" );

System.out.println( "pixel_distance_x = " + pixel_distance_x );
System.out.println( "pixel_distance_y = " + pixel_distance_y );
System.out.println( "pixel_distance_z = " + pixel_distance_z );
System.out.println( "pixel_unit = " + pixel_unit );

// Channel switch
System.out.println("=========================================================");
System.out.println("Channel Switch:");
//multiple_channels = System.getProperty( "multiple_channels" );
String multiple_channels = null;
channels = System.getProperty( "channels" ); 
// Parses string
String delims = "[,]";
String[] channel_token = channels.split(delims);


if ( channel_token.length ==1 )

{ 

	channels = "";
	multiple_channels = "NO (one channel)";
}

else if ( channel_token.length > 1 )

{

	channels = "channels_=" + channels + " ";
	multiple_channels = "YES (one file per channel)";
	System.out.println( "channels = " + channels );
}

else {

	System.out.println( "Channel switch setting gibberish" );

}

System.out.println( "multiple_channels = " + multiple_channels );

// Calibaration
System.out.println("=========================================================");
System.out.println("Calibration:");
manual_calibration_output = System.getProperty( "manual_calibration_output" );
float pixel_distance_x = Float.parseFloat( System.getProperty( "pixel_distance_x" ) );
float pixel_distance_y = Float.parseFloat( System.getProperty( "pixel_distance_y" ) );
float pixel_distance_z = Float.parseFloat( System.getProperty( "pixel_distance_z" ) );
pixel_unit = System.getProperty( "pixel_unit" );

// builds string for calibration override
if (manual_calibration_output.equalsIgnoreCase( "No" ) )
{
	modify_calibration = "calibration_definition=[Load voxel-size(s) from file(s)] ";
	manual_calibration_string = "";
	System.out.println( modify_calibration );
}

else if (manual_calibration_output.equalsIgnoreCase( "Yes" ) )
{
	
	modify_calibration = "calibration_definition=[User define voxel-size(s)] ";
	manual_calibration_string = " pixel_distance_x=" + pixel_distance_x + " " +
				    "pixel_distance_y=" + pixel_distance_y + " " +
				    "pixel_distance_z=" + pixel_distance_z + " " +
				    "pixel_unit=" + pixel_unit + " ";
	System.out.println( "Calibration set to manual" );
	System.out.println( modify_calibration );
	System.out.println( "manual_calibration_string:" + manual_calibration_string );
}

else
{
	System.out.println( "Manual calibration setting bad" );
}

// Assembles Image file pattern
System.out.println("=========================================================");
System.out.println("image_file_pattern:");
channel_name = System.getProperty( "channels" ); 
angles = System.getProperty( "angles" );
illumination = System.getProperty( "illumination" );

System.out.println( "channel_name =" + channel_name );
System.out.println( "angles = " + angles );
System.out.println( "illumination = " + illumination );


// Parses string illumination
String[] illumination_token = illumination.split(delims);

String string_part_1 = null;
String string_part_2 = null;
String image_file_pattern = null;

// Decides based on the numbers of channels in parameter channels which
// channel string is necessary
if (channel_token.length == 1)
{
        string_part_1 = "TP{t}_Ch" + channel_name + "_";
}

else if (channel_token.length > 1)
{
        string_part_1 = "TP{t}_Ch{c}_";
}

else
{
        System.out.println( "Channel Setting bad" );
}

// Decides based on the numbers of illuminations in parameter illumination which
// illumination string is necessary
if (illumination_token.length == 1)
{
        string_part_2 = "Ill0_";
}

else if (illumination_token.length > 1)
{
        string_part_2 = "Ill{i}_";
}

else
{
        System.out.println( "Illumination Setting bad" );
}

// Puts together the string for image_file_pattern
image_file_pattern = string_part_1 + string_part_2 + "Ang" + angles +".tif";

System.out.println( image_file_pattern );

System.out.println("=========================================================");
System.out.println("time points setting:");

int ntimepoints = Integer.parseInt(System.getProperty("ntimepoints" ) );

int last_timepoint = ntimepoints - 1;
String timepoints = "0-" + last_timepoint;

System.out.println( "timepoints = " + timepoints );

System.out.println("=========================================================");
System.out.println("Start plugin:");
System.out.println("Define Multi-View Dataset , type_of_dataset=[" + type_of_dataset + "] " +
	"xml_filename=[" + xml_filename + ".xml] " +
	"multiple_timepoints=[" + multiple_timepoints + "] " +
	"multiple_channels=[" + multiple_channels + "] " +
	"_____multiple_illumination_directions=[" + multiple_illumination_directions + "] " + 
	"multiple_angles=[" + multiple_angles + "] " +
	"image_file_directory=" + image_file_directory + " " +
	"image_file_pattern=" + image_file_pattern + " " + 
	"timepoints_=" + timepoints + " " +
	channels +
	"calibration_type=[Same voxel-size for all views] " +
	modify_calibration + 
	"imglib2_data_container=[" + imglib_container + "] " + 
	manual_calibration_string +
	"");

// Executes Fiji plugin
try {
IJ.run("Define Multi-View Dataset", 
	"type_of_dataset=[" + type_of_dataset + "] " +
	"xml_filename=[" + xml_filename + ".xml] " +
	"multiple_timepoints=[" + multiple_timepoints + "] " +
	"multiple_channels=[" + multiple_channels + "] " +
	"_____multiple_illumination_directions=[" + multiple_illumination_directions + "] " + 
	"multiple_angles=[" + multiple_angles + "] " +
	"image_file_directory=" + image_file_directory + " " +
	"image_file_pattern=" + image_file_pattern + " " + 
	"timepoints_=" + timepoints + " " +
	channels +
	"calibration_type=[Same voxel-size for all views] " +
	modify_calibration + 
	"imglib2_data_container=[" + imglib_container + "] " + 
	manual_calibration_string +
	"");
}
catch ( e ) { 

    print( "[define_output] caught exception: "+e );
    //important to fail the process if exception occurs
    runtime.exit(1);
    
}
/* shutdown */
runtime.exit(0);


